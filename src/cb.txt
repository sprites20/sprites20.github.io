import React, { useState, useRef, useEffect } from 'react';
import io from 'socket.io-client';
import './Chatbox.css';

const Chatbox = () => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [userId, setUserId] = useState('');
  const [inputUserId, setInputUserId] = useState('user123');
  const [isConnected, setIsConnected] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploadedImageUrl, setUploadedImageUrl] = useState(null); // State for the uploaded image URL
  	// Add a state to track uploaded images
  const [uploadedImages, setUploadedImages] = useState([]);
  const textareaRef = useRef(null);
  const socket = useRef(null);

  const connectSocket = () => {
    if (socket.current || isConnected || !inputUserId) return;

    const fetchIpAddressAndConnect = async () => {
      try {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        const ipAddress = data.ip;

        const fullUserId = `${new Date().toISOString()}_${inputUserId}_${ipAddress}`;
        setUserId(fullUserId);

        socket.current = io('http://localhost:5000', {
          query: { user_id: fullUserId }
        });

        setIsConnected(true);

        // Listen for server responses
        socket.current.on('server_response', function(data) {
          console.log('Received from server:', data.response);
          // Add the server's response to messages
          setMessages(prevMessages => [...prevMessages, `Server: ${data.response}`]);
        });

      } catch (error) {
        console.error('Failed to fetch IP address:', error);
      }
    };

    fetchIpAddressAndConnect();
  };

  useEffect(() => {
    return () => {
      if (socket.current) {
        socket.current.disconnect();
      }
    };
  }, []);

  const handleSendMessage = async () => {
    if (newMessage.trim() === '') return;
    if (!isConnected) {
        alert('Please connect to the server first!');
        return;
    }

    const messageToSend = {
        text: newMessage,
        image: selectedFile ? `http://localhost:5000/uploads/${selectedFile.name}` : null,
        sender: userId // Include the sender's ID or name
    };

    // If there's a file, upload it first
    if (selectedFile) {
        const formData = new FormData();
        formData.append('file', selectedFile);
        formData.append('user_id', userId);

        try {
            const response = await fetch('http://localhost:5000/upload', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                setSelectedFile(null);
                setMessages(prevMessages => [...prevMessages, messageToSend]);
				
				// Emit the message with the image URL to the server after file upload
                socket.current.emit('client_event', {
                    user_id: userId, 
                    message: newMessage,
                    image: `http://localhost:5000/uploads/${selectedFile.name}`
                });
            } else {
                console.error('Error uploading file:', await response.json());
            }
        } catch (error) {
            console.error('File upload failed:', error);
        }
    } else {
        setMessages(prevMessages => [...prevMessages, messageToSend]);
    }

    setNewMessage(''); // Clear the input field
    textareaRef.current.style.height = 'auto'; // Reset height
};
  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };


	// Update the handleFileUpload function
	const handleFileUpload = async () => {
		if (!selectedFile || !isConnected) {
			alert('Please select a file and connect to the server first!');
			return;
		}

		const formData = new FormData();
		formData.append('file', selectedFile);
		formData.append('user_id', userId);

		try {
			const response = await fetch('http://localhost:5000/upload', {
				method: 'POST',
				body: formData
			});

			const result = await response.json();
			if (response.ok) {
				console.log('File upload response:', result);
				alert(`File uploaded successfully: ${selectedFile.name}`);

				// Add the image URL to the messages
				//setMessages([...messages, `You uploaded: ${result.file_url}`]);
				setUploadedImages(prev => [...prev, result.file_url]); // Track uploaded images
			} else {
				console.error('Error uploading file:', result.error);
			}
		} catch (error) {
			console.error('File upload failed:', error);
		}
	};

  useEffect(() => {
    if (uploadedImageUrl) {
      console.log('Image has been displayed:', uploadedImageUrl);
    }
  }, [uploadedImageUrl]); // Log when the image URL changes
	
  return (
    <div className="chatbox">
      <div className="chatbox-header">
        <span>Chatbox</span>
        <input
          type="text"
          value={inputUserId}
          onChange={(e) => setInputUserId(e.target.value)}
          placeholder="Enter your user ID"
          className="user-id-input"
          disabled={isConnected}
        />
        <button onClick={connectSocket} disabled={isConnected || !inputUserId} className="connect-button">
          {isConnected ? 'Connected' : 'Connect'}
        </button>
      </div>
      <div className="chatbox-body">
            <div className="messages">
				{messages.map((message, index) => {
					const senderParts = message.sender.split('_'); // Split the sender string
					const username = senderParts[1]; // Extract the username (user ID)

					return (
						<div key={index} className="message">
							<div><strong>{username}</strong>: {message.text}</div> {/* Display just the username */}
							{message.image && (
								<img
									src={message.image}
									alt="Uploaded"
									className="uploaded-image"
									style={{ width: '300px', height: 'auto', borderRadius: '5px' }}
								/>
							)}
						</div>
					);
				})}
			</div>
        </div>
      <div className="chatbox-footer">
        <textarea
          ref={textareaRef}
          value={newMessage}
          onChange={(e) => setNewMessage(e.target.value)}
          onKeyDown={(event) => {
            if (event.key === 'Enter' && !event.shiftKey) {
              event.preventDefault();
              handleSendMessage();
            }
          }}
          placeholder="Type a message..."
          rows="1"
          style={{ resize: 'none' }}
        />
        <button onClick={handleSendMessage}>Send</button>
        <input
          type="file"
          onChange={handleFileChange}
          style={{ marginLeft: '10px' }}
        />
        <button onClick={handleFileUpload}>Upload File</button>
      </div>
    </div>
  );
};

export default Chatbox;
